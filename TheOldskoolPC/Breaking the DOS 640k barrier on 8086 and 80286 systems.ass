[Script Info]
; Script generated by Aegisub 9643-cibuilds-c61f149a3
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: Breaking the DOS 640k barrier on 8086 and 80286 systems.mp4
Video File: Breaking the DOS 640k barrier on 8086 and 80286 systems.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Scroll Position: 79
Active Line: 84
Video Position: 6305

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,更纱黑体 SC,72,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,4,2,2,48,48,72,1
Style: Extra,更纱黑体 SC,48,&H0000FFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.82,0:00:02.23,Default,,0,0,0,,我们都很熟悉这句话
Dialogue: 0,0:00:02.23,0:00:05.40,Default,,0,0,0,,“640K 对任何人都应该够用了”
Dialogue: 0,0:00:05.40,0:00:07.32,Default,,0,0,0,,人们一般认为这句话出自比尔·盖茨
Dialogue: 0,0:00:07.32,0:00:10.17,Default,,0,0,0,,但事实上，他从来没说过这句话
Dialogue: 0,0:00:10.17,0:00:13.76,Default,,0,0,0,,这是一个一再被提起，却从未被证实的谣言
Dialogue: 0,0:00:13.76,0:00:15.62,Default,,0,0,0,,哈，你知道还有一个谣言是什么吗
Dialogue: 0,0:00:15.62,0:00:17.91,Default,,0,0,0,,所谓的 DOS 640K 限制本身！
Dialogue: 0,0:00:18.29,0:00:21.83,Default,,0,0,0,,任何带 CGA 或单显的 8086 机
Dialogue: 0,0:00:21.83,0:00:23.51,Default,,0,0,0,,都可以轻松突破这一限制
Dialogue: 0,0:00:23.51,0:00:26.17,Default,,0,0,0,,只需要添加一些现成的软硬件
Dialogue: 0,0:00:26.17,0:00:28.13,Default,,0,0,0,,我这里说的可不是扩充内存（EMS）
Dialogue: 0,0:00:28.13,0:00:29.84,Default,,0,0,0,,或者将驱动加载到上端内存（UMB）
Dialogue: 0,0:00:29.84,0:00:35.64,Default,,0,0,0,,而是真的将 640K 的常规内存提高到至多 736K
Dialogue: 0,0:00:35.64,0:00:39.23,Default,,0,0,0,,让我们讨论一下两种在 8086 机上实现这一目标的方法
Dialogue: 0,0:00:39.23,0:00:44.65,Default,,0,0,0,,更妙的是，这不会破坏对现有应用的兼容
Dialogue: 0,0:00:51.61,0:00:53.45,Default,,0,0,0,,首先，你可能要问
Dialogue: 0,0:00:53.45,0:00:57.12,Default,,0,0,0,,常规内存突破 640K 有什么好处？
Dialogue: 0,0:00:57.12,0:00:59.87,Default,,0,0,0,,首先就是给古董程序更多内存空间
Dialogue: 0,0:00:59.87,0:01:02.12,Default,,0,0,0,,即使它们不支持扩充内存（EMS）和扩展内存（XMS）
Dialogue: 0,0:01:02.12,0:01:07.09,Default,,0,0,0,,比如假设有工厂仍然依赖这样的程序
Dialogue: 0,0:01:07.09,0:01:09.72,Default,,0,0,0,,现在它开始各种报内存不足
Dialogue: 0,0:01:09.72,0:01:12.22,Default,,0,0,0,,这一技巧就可以让它再战几年
Dialogue: 0,0:01:12.78,0:01:15.97,Default,,0,0,0,,对使用 8086 机的古董电脑爱好者来说
Dialogue: 0,0:01:15.97,0:01:19.14,Default,,0,0,0,,扩展常规内存就能加载更多设备驱动
Dialogue: 0,0:01:19.14,0:01:21.35,Default,,0,0,0,,内存驻留程序或网络栈
Dialogue: 0,0:01:21.92,0:01:24.73,Default,,0,0,0,,再也不用为了运行一个程序卸载 MS LAN Manager
Dialogue: 0,0:01:24.73,0:01:26.98,Default,,0,0,0,,鱼与熊掌可以兼得
Dialogue: 0,0:01:27.50,0:01:28.98,Default,,0,0,0,,我最喜欢的好处是
Dialogue: 0,0:01:28.98,0:01:30.74,Default,,0,0,0,,它可以帮助程序开发
Dialogue: 0,0:01:30.74,0:01:35.35,Default,,0,0,0,,大多数实模式下的 DOS IDE 几乎都没有 EMS 支持
Dialogue: 0,0:01:35.35,0:01:37.74,Default,,0,0,0,,如果你用实机开发新的 DOS 程序
Dialogue: 0,0:01:37.74,0:01:39.26,Default,,0,0,0,,扩展常规内存可以让你
Dialogue: 0,0:01:39.26,0:01:41.58,Default,,0,0,0,,开发调试更大的程序
Dialogue: 0,0:01:41.58,0:01:44.01,Default,,0,0,0,,而不需要离开 IDE
Dialogue: 0,0:01:44.01,0:01:45.50,Default,,0,0,0,,要理解这一切是怎么工作的
Dialogue: 0,0:01:45.50,0:01:49.76,Default,,0,0,0,,让我们先熟悉一下 8086 PC 的内存分配架构
Dialogue: 0,0:01:49.76,0:01:52.98,Default,,0,0,0,,8086 最多可以寻址 1MB 内存
Dialogue: 0,0:01:52.98,0:01:58.79,Default,,0,0,0,,为了方便说明，这里以 64K 段边界来划分内存空间
Dialogue: 0,0:01:58.79,0:02:02.27,Default,,0,0,0,,Intel 和 IBM 保留了一些段，用于
Dialogue: 0,0:02:02.58,0:02:04.52,Default,,0,0,0,,{\pos(960,120)}中断向量表
Dialogue: 0,0:02:04.52,0:02:06.30,Default,,0,0,0,,{\pos(960,120)}访问硬件
Dialogue: 0,0:02:06.52,0:02:10.23,Default,,0,0,0,,{\pos(960,120)}以及启动硬件必须的 ROM 代码（BIOS 和 ROM BASIC）
Dialogue: 0,0:02:10.78,0:02:12.90,Default,,0,0,0,,DOS 640K 限制就在于
Dialogue: 0,0:02:12.90,0:02:17.20,Default,,0,0,0,,640K 是软件理论上能占用的最大内存范围
Dialogue: 0,0:02:17.20,0:02:22.22,Default,,0,0,0,,A000 段和 B000 段是给显卡预留的
Dialogue: 0,0:02:17.20,0:02:22.22,Extra,,0,0,0,,{\pos(960, 96)}注：这里的地址指基址寄存器的值，下同
Dialogue: 0,0:02:22.22,0:02:24.87,Default,,0,0,0,,但如果你在这些区域里没有显卡
Dialogue: 0,0:02:24.87,0:02:27.00,Default,,0,0,0,,你完全可以往里面塞内存
Dialogue: 0,0:02:27.00,0:02:30.19,Default,,0,0,0,,这样 DOS 常规内存范围就扩大了
Dialogue: 0,0:02:30.19,0:02:34.63,Default,,0,0,0,,嘛如果你要在 8086 机上用 EGA 或 VGA
Dialogue: 0,0:02:34.63,0:02:36.09,Default,,0,0,0,,这是没法工作的
Dialogue: 0,0:02:36.09,0:02:38.43,Default,,0,0,0,,突破 640K 常规内存意味着
Dialogue: 0,0:02:38.43,0:02:41.14,Default,,0,0,0,,会覆盖掉 EGA 和 VGA 的显存区域
Dialogue: 0,0:02:41.14,0:02:42.27,Default,,0,0,0,,所以它们要被禁用掉
Dialogue: 0,0:02:42.27,0:02:45.73,Default,,0,0,0,,不过后面我会介绍一种部分意义上的共存方法
Dialogue: 0,0:02:45.73,0:02:48.16,Default,,0,0,0,,先别急着关掉视频，以为自己用不了
Dialogue: 0,0:02:48.48,0:02:51.69,Default,,0,0,0,,所以，要怎么才能将内存映射到 A000 段及以上
Dialogue: 0,0:02:51.69,0:02:54.03,Default,,0,0,0,,以及怎么让 DOS 用上额外的内存呢
Dialogue: 0,0:02:54.72,0:02:58.89,Default,,0,0,0,,首先我们要一块能随意映射内存的 EMS 内存卡
Dialogue: 0,0:02:58.89,0:03:01.45,Default,,0,0,0,,包括 EEMS 3.2 卡
Dialogue: 0,0:03:01.45,0:03:03.37,Default,,0,0,0,,以及大部分 EMS 4.0 卡
Dialogue: 0,0:03:03.37,0:03:06.04,Default,,0,0,0,,如 AST、Boca 的，可能别的品牌也可以
Dialogue: 0,0:03:06.54,0:03:11.05,Default,,0,0,0,,可惜我们不能用流行的 Lo-Tech 自制 EMS 卡
Dialogue: 0,0:03:11.05,0:03:14.22,Default,,0,0,0,,因为它不能将内存映射到我们想要的地方
Dialogue: 0,0:03:14.22,0:03:16.97,Default,,0,0,0,,我们也不能用 Intel 的 EMS 卡
Dialogue: 0,0:03:16.97,0:03:20.89,Default,,0,0,0,,因为它的驱动严格遵守 PC 的内存架构设计
Dialogue: 0,0:03:20.89,0:03:24.35,Default,,0,0,0,,会拒绝将内存映射到我们需要的 A000 段
Dialogue: 0,0:03:25.20,0:03:27.48,Default,,0,0,0,,我们还需要能做以下事情的软件
Dialogue: 0,0:03:27.98,0:03:31.27,Default,,0,0,0,,告诉 EMS 卡将内存映射到 A000 段及以上
Dialogue: 0,0:03:31.27,0:03:34.31,Default,,0,0,0,,以及重新配置 DOS，从而使用额外的内存
Dialogue: 0,0:03:34.31,0:03:36.61,Default,,0,0,0,,这需要一些工作，比如移动一些数据
Dialogue: 0,0:03:36.61,0:03:39.07,Default,,0,0,0,,以及重写 DOS 的空闲内存链表，让它包括额外的空间
Dialogue: 0,0:03:39.07,0:03:41.16,Default,,0,0,0,,所以我们需要特殊的软件
Dialogue: 0,0:03:41.73,0:03:45.15,Default,,0,0,0,,有不少共享或免费软件宣称可以实现这一切
Dialogue: 0,0:03:45.15,0:03:50.63,Default,,0,0,0,,比如 DOSMEM、704k、EEMRAM、The Last Byte 等
Dialogue: 0,0:03:50.63,0:03:54.26,Default,,0,0,0,,但我印象中能 100% 稳定工作的只有
Dialogue: 0,0:03:54.26,0:03:57.30,Default,,0,0,0,,Quarterdeck 的商业软件 QRAM
Dialogue: 0,0:03:57.30,0:04:01.01,Default,,0,0,0,,QRAM 能在 8086 和 286 机上实现上面提到的一切
Dialogue: 0,0:04:01.01,0:04:04.01,Default,,0,0,0,,甚至还能进一步将 EMS 内存
Dialogue: 0,0:04:04.01,0:04:06.14,Default,,0,0,0,,映射到 DOS 常规内存以上的空闲区域
Dialogue: 0,0:04:06.14,0:04:09.31,Default,,0,0,0,,将它们变成可用的上端内存（UMB）
Dialogue: 0,0:04:09.90,0:04:12.90,Default,,0,0,0,,原来预定的节目暂停播出，以下是特殊播报...
Dialogue: 0,0:04:12.90,0:04:15.15,Default,,0,0,0,,上端内存（UMB）又是啥？
Dialogue: 0,0:04:15.69,0:04:19.85,Default,,0,0,0,,UMB 是常规内存以上的小块内存
Dialogue: 0,0:04:15.69,0:04:23.69,Extra,,0,0,0,,{\pos(960,96)}注：原设备区（640K-1M）未占用的空地址区域，映射了内存
Dialogue: 0,0:04:19.85,0:04:23.47,Default,,0,0,0,,可以加载一些小程序代码，比如驻留程序和设备驱动
Dialogue: 0,0:04:23.47,0:04:27.25,Default,,0,0,0,,DOS 也可以将自己的部分模块放 UMB 上
Dialogue: 0,0:04:27.25,0:04:29.25,Default,,0,0,0,,比如 FILES（表示当前打开文件的结构）、BUFFERS（磁盘缓存）
Dialogue: 0,0:04:29.25,0:04:31.96,Default,,0,0,0,,或 COMMAND.COM，这样就不用占用常规内存了
Dialogue: 0,0:04:32.08,0:04:34.67,Default,,0,0,0,,大部分 5.0 以上的 DOS 都有这样的功能
Dialogue: 0,0:04:34.67,0:04:36.36,Default,,0,0,0,,但如果你停在更老的版本上
Dialogue: 0,0:04:36.36,0:04:39.51,Default,,0,0,0,,90 年代一个叫 DOSMAX 的共享软件
Dialogue: 0,0:04:39.51,0:04:41.07,Default,,0,0,0,,也可以实现同样的功能
Dialogue: 0,0:04:41.07,0:04:45.43,Default,,0,0,0,,虽然 UMB 不是突破 640K 限制必须的
Dialogue: 0,0:04:45.43,0:04:48.14,Default,,0,0,0,,用上它可以帮你省下更多的常规内存
Dialogue: 0,0:04:48.14,0:04:50.67,Default,,0,0,0,,所以配置及使用 UMB 是值得的
Dialogue: 0,0:04:50.67,0:04:53.02,Default,,0,0,0,,接下来回到正常播出的内容
Dialogue: 0,0:04:53.77,0:04:56.26,Default,,0,0,0,,所以这一切是怎么工作的？
Dialogue: 0,0:04:56.26,0:04:57.51,Default,,0,0,0,,要做什么配置？
Dialogue: 0,0:04:57.51,0:05:01.49,Default,,0,0,0,,我解释步骤的同时，会在我这台 8086 兼容机上操作
Dialogue: 0,0:05:01.49,0:05:05.99,Default,,0,0,0,,这机器只有 CGA 显卡，可以支持最大的扩展
Dialogue: 0,0:05:06.37,0:05:09.62,Default,,0,0,0,,首先，插上一张兼容的 EMS 卡
Dialogue: 0,0:05:09.62,0:05:12.17,Default,,0,0,0,,加载驱动，运行它的检测程序
Dialogue: 0,0:05:12.17,0:05:13.53,Default,,0,0,0,,确保能正常工作
Dialogue: 0,0:05:13.53,0:05:16.92,Default,,0,0,0,,确保它能将内存映射到 A000 段十分重要
Dialogue: 0,0:05:16.92,0:05:21.64,Default,,0,0,0,,EEMRAM 软件的 EMSINFO.EXE 可以检查
Dialogue: 0,0:05:21.64,0:05:27.31,Default,,0,0,0,,不用担心，视频提到的软件评论区有下载地址
Dialogue: 0,0:05:28.23,0:05:30.93,Default,,0,0,0,,接下来，安装 QRAM，这个很简单
Dialogue: 0,0:05:30.93,0:05:35.19,Default,,0,0,0,,安装好之后，它会尝试运行一个优化程序，先跳过
Dialogue: 0,0:05:35.61,0:05:37.09,Default,,0,0,0,,然后重启
Dialogue: 0,0:05:37.09,0:05:39.23,Default,,0,0,0,,在 DOS 启动的时候，QRAM 应该会显示
Dialogue: 0,0:05:39.23,0:05:42.49,Default,,0,0,0,,它已经将内存映射到 A000 段
Dialogue: 0,0:05:42.49,0:05:45.41,Default,,0,0,0,,在 DOS 提示符下，检查空闲内存看看惊喜吧
Dialogue: 0,0:05:45.41,0:05:46.74,Default,,0,0,0,,我的妈耶
Dialogue: 0,0:05:46.74,0:05:48.87,Default,,0,0,0,,我们不仅有超过 640K 的常规内存
Dialogue: 0,0:05:48.87,0:05:51.08,Default,,0,0,0,,连空闲的内存都超过 640K！
Dialogue: 0,0:05:51.70,0:05:53.53,Default,,0,0,0,,这是大部分的提升
Dialogue: 0,0:05:53.53,0:05:57.32,Default,,0,0,0,,就此打住的话，你可以为突破微软的封锁自豪了
Dialogue: 0,0:05:57.32,0:05:59.34,Default,,0,0,0,,但如果你愿意做进一步配置
Dialogue: 0,0:05:59.34,0:06:02.63,Default,,0,0,0,,那可以在 8086 机上省下更多的常规内存
Dialogue: 0,0:06:02.97,0:06:04.43,Default,,0,0,0,,那我们介绍一下
Dialogue: 0,0:06:05.28,0:06:07.55,Default,,0,0,0,,要最大化利用新增的内存
Dialogue: 0,0:06:05.28,0:06:11.23,Extra,,0,0,0,,{\pos(960, 120)}如果你有 MS-DOS 5、DR-DOS 5、PC-DOS 6（或更高）\N则可以省出更多常规内存
Dialogue: 0,0:06:07.55,0:06:11.30,Default,,0,0,0,,我们可以用一些选项和第三方软件重新配置 DOS
Dialogue: 0,0:06:11.68,0:06:13.44,Default,,0,0,0,,首先，如果你有 DOS 6 或以上
Dialogue: 0,0:06:13.44,0:06:17.15,Default,,0,0,0,,往 CONFIG.SYS 里加 DOS=HIGH,UMB
Dialogue: 0,0:06:17.15,0:06:22.23,Default,,0,0,0,,这样 DOS 可以将自己的部分模块加载到上端内存（UMB）
Dialogue: 0,0:06:22.23,0:06:27.66,Default,,0,0,0,,然后加载 DOSMAX，将更多的 DOS 组件加载到 UMB
Dialogue: 0,0:06:27.66,0:06:29.62,Default,,0,0,0,,这能释放出多一点空间
Dialogue: 0,0:06:30.41,0:06:34.25,Default,,0,0,0,,最后，用 DOS 的 LOADHIGH 以及 QRAM 的 LOADHI 命令
Dialogue: 0,0:06:34.25,0:06:37.63,Default,,0,0,0,,将驻留程序和设备驱动加载到 UMB
Dialogue: 0,0:06:37.96,0:06:41.05,Default,,0,0,0,,QRAM 的优化程序能自动化这一过程
Dialogue: 0,0:06:41.05,0:06:42.97,Default,,0,0,0,,但在我的测试中，它不能在所有情况下都稳定工作
Dialogue: 0,0:06:42.97,0:06:47.48,Default,,0,0,0,,所以优化前先备份好你的 CONFIG.SYS 和 AUTOEXEC.BAT
Dialogue: 0,0:06:47.48,0:06:50.51,Default,,0,0,0,,如果你有支持的 EMS 卡，以上的方法很棒
Dialogue: 0,0:06:50.51,0:06:51.88,Default,,0,0,0,,如果没有呢
Dialogue: 0,0:06:51.88,0:06:53.89,Default,,0,0,0,,我先前就在这个处境
Dialogue: 0,0:06:53.89,0:06:55.69,Default,,0,0,0,,因为我发现手头上的 Intel Aboveboard
Dialogue: 0,0:06:55.69,0:06:58.62,Default,,0,0,0,,拒绝映射内存到 A000 段
Dialogue: 0,0:06:58.62,0:07:01.73,Default,,0,0,0,,我气得花了几个晚上
Dialogue: 0,0:07:01.73,0:07:04.66,Default,,0,0,0,,找到突破限制的另一种方法
Dialogue: 0,0:07:04.66,0:07:05.57,Default,,0,0,0,,我是这么做的
Dialogue: 0,0:07:06.23,0:07:10.62,Default,,0,0,0,,首先我从 TexElec 买了块 Lo-Tech 自制 1MB 内存卡
Dialogue: 0,0:07:10.62,0:07:14.71,Default,,0,0,0,,注：这跟之前所述的 EMS 卡是两张卡
Dialogue: 0,0:07:15.04,0:07:18.71,Default,,0,0,0,,这张卡是给内存不足 640K 的 PC 机补足到 640K 的
Dialogue: 0,0:07:18.71,0:07:20.78,Default,,0,0,0,,但因为卡上有 1MB 内存
Dialogue: 0,0:07:20.78,0:07:25.18,Default,,0,0,0,,你能手动打开 A000 以上的任意 64K 段
Dialogue: 0,0:07:25.18,0:07:29.19,Default,,0,0,0,,我只启用了 A000 段，然后把卡插上机器
Dialogue: 0,0:07:29.19,0:07:31.22,Default,,0,0,0,,现在，A000 段塞了内存
Dialogue: 0,0:07:31.22,0:07:34.27,Default,,0,0,0,,我以为 QRAM 会有个命令行参数
Dialogue: 0,0:07:34.27,0:07:35.81,Default,,0,0,0,,能直接使用这额外的内存
Dialogue: 0,0:07:35.81,0:07:37.06,Default,,0,0,0,,然而并不能
Dialogue: 0,0:07:37.06,0:07:39.81,Default,,0,0,0,,QRAM 还有个 VIDRAM 程序
Dialogue: 0,0:07:39.81,0:07:42.86,Default,,0,0,0,,将常规内存扩展到 VGA 的显存区间
Dialogue: 0,0:07:42.86,0:07:44.53,Default,,0,0,0,,具体后面再说
Dialogue: 0,0:07:44.53,0:07:49.49,Default,,0,0,0,,但这也没法用，VIDRAM 要检测到 VGA 卡才能工作
Dialogue: 0,0:07:49.66,0:07:53.81,Default,,0,0,0,,我下一个想法是修改 BIOS 数据区（BDA）里的内存大小值
Dialogue: 0,0:07:53.81,0:07:58.33,Default,,0,0,0,,{\pos(960,120)}BIOS 数据区在内存上，是 BIOS 自检时写入的配置数据
Dialogue: 0,0:07:58.33,0:08:03.75,Default,,0,0,0,,{\pos(960,120)}里面包括内存大小、有多少串并口之类的东西
Dialogue: 0,0:08:03.75,0:08:07.72,Default,,0,0,0,,{\pos(960,120)}DOS 启动时检测内存大小看的就是这里的值
Dialogue: 0,0:08:07.72,0:08:10.97,Default,,0,0,0,,{\pos(960,120)}魔改这里然后热重启应该能行
Dialogue: 0,0:08:10.97,0:08:13.99,Default,,0,0,0,,{\pos(960,120)}可惜不知道为什么我这里它死机了
Dialogue: 0,0:08:13.99,0:08:21.77,Default,,0,0,0,,{\pos(960,120)}我意识到只有在 DOS 启动之前先改了 BDA 的值，它才能正常工作
Dialogue: 0,0:08:21.77,0:08:24.78,Default,,0,0,0,,其中一个办法是魔改 BIOS
Dialogue: 0,0:08:24.78,0:08:28.40,Default,,0,0,0,,让它自检时检测 640K 以上的内存
Dialogue: 0,0:08:28.40,0:08:32.12,Default,,0,0,0,,但这样我每次改配置时都得换 BIOS 芯片
Dialogue: 0,0:08:32.12,0:08:36.50,Default,,0,0,0,,于是我选择软件方案：修改启动扇区
Dialogue: 0,0:08:37.00,0:08:39.16,Default,,0,0,0,,启动扇区是 DOS 的一小部分
Dialogue: 0,0:08:39.16,0:08:43.19,Default,,0,0,0,,用来将 DOS 内核加载进内存并执行它
Dialogue: 0,0:08:43.19,0:08:47.34,Default,,0,0,0,,魔改启动扇区，先改掉内存大小值再加载 DOS
Dialogue: 0,0:08:47.34,0:08:50.47,Default,,0,0,0,,那 DOS 每次启动时看到的都将是更大的内存
Dialogue: 0,0:08:50.72,0:08:52.12,Default,,0,0,0,,那应该要怎么做呢？
Dialogue: 0,0:08:52.12,0:08:54.47,Default,,0,0,0,,这是魔改的基本思路
Dialogue: 0,0:08:55.14,0:08:57.65,Default,,0,0,0,,启动扇区的开头是个跳转
Dialogue: 0,0:08:57.65,0:08:59.79,Default,,0,0,0,,我们先把跳转目标保存下来备用
Dialogue: 0,0:08:59.79,0:09:03.44,Default,,0,0,0,,然后我们将指令改为跳转到我们的魔改代码
Dialogue: 0,0:09:03.44,0:09:06.02,Default,,0,0,0,,我们的代码更新内存大小值
Dialogue: 0,0:09:06.02,0:09:08.82,Default,,0,0,0,,然后跳回到先前记录的跳转地址
Dialogue: 0,0:09:09.25,0:09:13.76,Default,,0,0,0,,这种操作手工很麻烦，于是我写了个程序自动完成
Dialogue: 0,0:09:13.76,0:09:15.08,Default,,0,0,0,,为了找到存放魔改代码的位置
Dialogue: 0,0:09:15.08,0:09:18.45,Default,,0,0,0,,程序会搜索启动扇区中最长的报错字符串
Dialogue: 0,0:09:18.45,0:09:21.75,Default,,0,0,0,,把它提前截断，然后把魔改代码放字符串后面
Dialogue: 0,0:09:21.75,0:09:24.96,Default,,0,0,0,,它工作得非常完美，我甚至不用额外加载什么东西
Dialogue: 0,0:09:24.96,0:09:26.90,Default,,0,0,0,,让 DOS 看到额外的内存
Dialogue: 0,0:09:26.90,0:09:28.67,Default,,0,0,0,,如果我要撤销这一过程
Dialogue: 0,0:09:28.67,0:09:34.55,Default,,0,0,0,,从启动盘 SYS C: 一个未修改的启动扇区到硬盘即可
Dialogue: 0,0:09:35.22,0:09:37.60,Default,,0,0,0,,看到这里，你大概会有些问题
Dialogue: 0,0:09:37.60,0:09:38.64,Default,,0,0,0,,那我们来讨论一下
Dialogue: 0,0:09:39.45,0:09:42.98,Default,,0,0,0,, 有任何方法实现比 736K 更多的空闲内存吗？
Dialogue: 0,0:09:43.35,0:09:46.19,Default,,0,0,0,,有，但那需要 386 或以上
Dialogue: 0,0:09:46.19,0:09:48.48,Default,,0,0,0,,以及一个叫 Memory Commander 的软件
Dialogue: 0,0:09:48.48,0:09:50.90,Default,,0,0,0,,因为显存空间会是个障碍
Dialogue: 0,0:09:50.90,0:09:54.41,Default,,0,0,0,,Memory Commander 使用 386 及以上的虚拟化功能
Dialogue: 0,0:09:54.41,0:09:57.62,Default,,0,0,0,,将显存移走，然后用各种办法支持
Dialogue: 0,0:09:57.62,0:09:59.52,Default,,0,0,0,,直接写显存的程序
Dialogue: 0,0:09:59.87,0:10:03.45,Default,,0,0,0,,理论上可行，但没什么实用性
Dialogue: 0,0:10:03.67,0:10:07.79,Default,,0,0,0,,但如果你想吹嘘你的 386 有 920K 的常规内存
Dialogue: 0,0:10:07.79,0:10:10.37,Default,,0,0,0,,这是唯一的办法
Dialogue: 0,0:10:10.37,0:10:13.26,Default,,0,0,0,,我能想到的唯一可能有用的场景
Dialogue: 0,0:10:13.26,0:10:16.01,Default,,0,0,0,,是那些不需要直接访问显存的软件
Dialogue: 0,0:10:16.01,0:10:17.80,Default,,0,0,0,,比如跑 BBS 服务
Dialogue: 0,0:10:18.80,0:10:21.14,Default,,0,0,0,,如果我有 EGA 或 VGA 卡
Dialogue: 0,0:10:21.14,0:10:23.71,Default,,0,0,0,,有任何方法扩展常规内存空间吗？
Dialogue: 0,0:10:23.71,0:10:26.52,Default,,0,0,0,,嘛，QRAM 有一个叫 VIDRAM 的程序
Dialogue: 0,0:10:26.52,0:10:29.94,Default,,0,0,0,,可以将常规内存扩展到 EGA 和 VGA 的显存范围
Dialogue: 0,0:10:29.94,0:10:33.26,Default,,0,0,0,,但这样你就只能用文本模式或 CGA 图形了
Dialogue: 0,0:10:33.65,0:10:34.53,Default,,0,0,0,,这是个坏消息
Dialogue: 0,0:10:34.53,0:10:39.25,Default,,0,0,0,,但起码你可以随时在命令行启用或禁用它
Dialogue: 0,0:10:39.25,0:10:41.66,Default,,0,0,0,,你也不需要 EMS 卡就能实现（显卡有显存）
Dialogue: 0,0:10:41.66,0:10:43.21,Default,,0,0,0,,所以如果你有 EGA 或以上
Dialogue: 0,0:10:43.21,0:10:45.37,Default,,0,0,0,,不妨安装试一试
Dialogue: 0,0:10:46.38,0:10:50.80,Default,,0,0,0,,Tandy 或 PCjr 有办法扩展常规内存吗？
Dialogue: 0,0:10:51.76,0:10:55.26,Default,,0,0,0,,Tandy 和 PCjr 机的常规内存一般要更少一点
Dialogue: 0,0:10:55.26,0:10:57.89,Default,,0,0,0,,因为它们的显示系统要占用一部分
Dialogue: 0,0:10:58.30,0:11:01.60,Default,,0,0,0,,这期视频的方法不兼容这些机器
Dialogue: 0,0:11:01.60,0:11:03.98,Default,,0,0,0,,但你有其它选择
Dialogue: 0,0:11:03.98,0:11:07.23,Default,,0,0,0,,一些 Tandy 机，比如 Tandy 1000 TX
Dialogue: 0,0:11:07.23,0:11:10.40,Default,,0,0,0,,你能在主板上加装 128K 的 DRAM 芯片
Dialogue: 0,0:11:10.40,0:11:14.17,Default,,0,0,0,,将显存移出常规内存
Dialogue: 0,0:11:14.17,0:11:15.11,Default,,0,0,0,,对 PCjr 来说
Dialogue: 0,0:11:15.11,0:11:19.16,Default,,0,0,0,,安装 jrIDE 扩展卡能实现一样的效果
Dialogue: 0,0:11:20.72,0:11:24.54,Default,,0,0,0,,就这样，640K 限制只是层脆弱的窗户纸，随时等你突破
Dialogue: 0,0:11:24.54,0:11:26.08,Default,,0,0,0,,在最古董的 DOS 机器上也是如此
Dialogue: 0,0:11:26.08,0:11:28.38,Default,,0,0,0,,我希望本视频既有趣也有干货
Dialogue: 0,0:11:28.38,0:11:32.53,Default,,0,0,0,,能帮到大家解决 8086 DOS 机上的内存问题
Dialogue: 0,0:11:33.05,0:11:36.01,Default,,0,0,0,,说到这里，这期视频是 DOScember 项目之一
Dialogue: 0,0:11:36.01,0:11:41.38,Default,,0,0,0,,油管 UP 主在这十二月联合创作 DOS 相关视频的项目
Dialogue: 0,0:11:41.38,0:11:43.27,Default,,0,0,0,, 如果想要其它 DOS 相关的视频
Dialogue: 0,0:11:43.27,0:11:47.56,Default,,0,0,0,,请在油管搜索其他 DOScember 参与者的视频
Dialogue: 0,0:11:51.15,0:11:54.15,Default,,0,0,0,,（翻译：driver1998）
