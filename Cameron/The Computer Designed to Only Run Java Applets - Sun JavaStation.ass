[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: ../Desktop/videoplayback.mp4
Video File: ../Desktop/videoplayback.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.000000
Scroll Position: 278
Active Line: 255
Video Position: 41128

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1.5,2,2,10,10,25,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.03,0:00:04.34,Default,,0,0,0,,今天来看一下这计算机历史上\N早已被遗忘，但又非常有意思的机器
Dialogue: 0,0:00:04.34,0:00:15.98,Default,,0,0,0,,这是 Sun JavaStation，于 1996 年推出\N是为运行 Java 小程序 (Applet) 而生的轻量级网络计算机
Dialogue: 0,0:00:15.98,0:00:19.54,Default,,0,0,0,,这机器运行的是 Sun 专有的 JavaOS 操作系统
Dialogue: 0,0:00:19.54,0:00:22.10,Default,,0,0,0,,为 JavaStation 量身定制
Dialogue: 0,0:00:22.10,0:00:27.50,Default,,0,0,0,,操作系统的绝大部分组件\N包括其 UI，都是用 Java 编写的
Dialogue: 0,0:00:27.50,0:00:34.26,Default,,0,0,0,,在其之下是一个极精简的内核\N仅仅足够启动，并运行 JVM
Dialogue: 0,0:00:34.26,0:00:38.78,Default,,0,0,0,,这是你能够见到的\N最接近纯 Java 搭建的操作系统
Dialogue: 0,0:00:38.78,0:00:44.34,Default,,0,0,0,,这机器出自 Sun 全力推广 Java 的时期
Dialogue: 0,0:00:44.34,0:00:50.62,Default,,0,0,0,,JavaStation 为一些\N只需要运行少数特定程序的场景设计
Dialogue: 0,0:00:50.62,0:00:56.74,Default,,0,0,0,,比如信息查询机、呼叫中心\N或者客服系统，用于机场之类的地方
Dialogue: 0,0:00:56.74,0:01:02.46,Default,,0,0,0,,作为无盘工作站，它需要通过服务器启动\N离开服务器什么都干不了
Dialogue: 0,0:01:02.46,0:01:05.14,Default,,0,0,0,,配置数据也在服务器上管理
Dialogue: 0,0:01:05.14,0:01:11.02,Default,,0,0,0,,这使得单台 JavaStation 的\N安装和替换非常简单，无需修改本地配置
Dialogue: 0,0:01:11.02,0:01:16.30,Default,,0,0,0,,这是发布的第一代机型\N代号 “咖啡先生” (Mr. Coffee)
Dialogue: 0,0:01:16.30,0:01:22.30,Default,,0,0,0,,内置 110Mhz MicroSPARC IIe CPU，32MB RAM
Dialogue: 0,0:01:22.30,0:01:26.02,Default,,0,0,0,,硬件配置跟早些年的 Sun 工作站相近
Dialogue: 0,0:01:26.02,0:01:31.90,Default,,0,0,0,,但在 1996 年，它们已经被更先进的\N64 位 UltraSPARC 系列取代
Dialogue: 0,0:01:31.90,0:01:39.30,Default,,0,0,0,,机箱使用的是 Sun UniDisk 外壳\N这一外壳也用在 Sun 工作站的外置硬盘上
Dialogue: 0,0:01:39.30,0:01:45.50,Default,,0,0,0,,在它生命周期的后期\NSun 推出了第二代机型，用的更漂亮的机箱
Dialogue: 0,0:01:45.50,0:01:48.18,Default,,0,0,0,,Sun 也开发了不少后续型号\N以及几个原型机
Dialogue: 0,0:01:48.18,0:01:52.66,Default,,0,0,0,,但它们并没有正式向大众发售\N所以今天非常罕见
Dialogue: 0,0:01:55.86,0:01:58.30,Default,,0,0,0,,现在我们来详细研究一下这台机器
Dialogue: 0,0:01:58.30,0:02:03.86,Default,,0,0,0,,机箱非常小巧，前面印了\NJavaStation 字样，算是一个品牌
Dialogue: 0,0:02:03.86,0:02:07.70,Default,,0,0,0,,下面是 Sun 的 Logo\N然后右边一个大大的彩色 Java Logo
Dialogue: 0,0:02:08.55,0:02:13.82,Default,,0,0,0,,机箱是挺好看的深灰色\N不过机箱的颜色多年来一直在更改
Dialogue: 0,0:02:13.82,0:02:18.34,Default,,0,0,0,,有用同样机箱，但颜色偏米白色的版本
Dialogue: 0,0:02:18.34,0:02:21.02,Default,,0,0,0,,不过这一台是深灰色，挺好看的
Dialogue: 0,0:02:21.02,0:02:28.02,Default,,0,0,0,,顶盖上也有一个黑白的 Java Logo\NSun 当时真的很想突出 Java 的品牌
Dialogue: 0,0:02:29.42,0:02:33.58,Default,,0,0,0,,转到侧面，可以看到两边都有通风口
Dialogue: 0,0:02:33.58,0:02:42.14,Default,,0,0,0,,这里还装了个喇叭，但没有给它开口\N只有通风口，都是进风口
Dialogue: 0,0:02:42.14,0:02:55.50,Default,,0,0,0,,然后看到机箱后 I/O\N有一对 PS/2 键鼠接口、VGA 接口、10Mbit 网口
Dialogue: 0,0:02:55.50,0:02:58.54,Default,,0,0,0,,还有一个串口，可以接到串口终端
Dialogue: 0,0:02:58.54,0:03:00.10,Default,,0,0,0,,然后是一个音频输出接口
Dialogue: 0,0:03:00.74,0:03:05.78,Default,,0,0,0,,上面是电源开关、电源线接口
Dialogue: 0,0:03:05.78,0:03:11.09,Default,,0,0,0,,然后是一个风扇\N它是向外吹的，给电源和主机内部排风
Dialogue: 0,0:03:11.09,0:03:15.26,Default,,0,0,0,,这种 I/O 配置\N在当时 Sun 机器中比较少见
Dialogue: 0,0:03:15.26,0:03:19.30,Default,,0,0,0,,当时的 Sun 工作站多用 13W3 显示器接口
Dialogue: 0,0:03:19.30,0:03:22.58,Default,,0,0,0,,键鼠使用专有的串行协议
Dialogue: 0,0:03:22.58,0:03:27.74,Default,,0,0,0,,大多是鼠标接到键盘上\N然后键盘接到主机的专有接口上
Dialogue: 0,0:03:27.74,0:03:36.22,Default,,0,0,0,,但这机器用的是标准 PS/2 和 VGA 接口\N更坐实了其作为低端廉价设备的地位
Dialogue: 0,0:03:36.22,0:03:41.98,Default,,0,0,0,,你可以在上面使用标准 PC 外设\N而不用购买昂贵的专有外设
Dialogue: 0,0:03:41.98,0:03:45.50,Default,,0,0,0,,现在我们打开机箱盖看看内部有什么
Dialogue: 0,0:03:45.50,0:03:50.50,Default,,0,0,0,,机器非常容易拆开\N这里有一颗 Sun 的 “可上锁螺丝”
Dialogue: 0,0:03:50.50,0:03:54.94,Default,,0,0,0,,其实就是普通螺丝\N不过被金属壳包围，可以上把挂锁
Dialogue: 0,0:03:54.94,0:04:00.42,Default,,0,0,0,,防止被盗，或者被别人拆开
Dialogue: 0,0:04:00.42,0:04:02.74,Default,,0,0,0,,那我们就把螺丝卸下来，打开机箱
Dialogue: 0,0:04:08.98,0:04:13.22,Default,,0,0,0,,然后机箱两侧有一对塑料卡扣
Dialogue: 0,0:04:13.22,0:04:20.62,Default,,0,0,0,,两边往里按\N然后整个向上提，顶盖就下来了
Dialogue: 0,0:04:20.62,0:04:25.76,Default,,0,0,0,,那我们就来看看机器内部吧
Dialogue: 0,0:04:25.76,0:04:32.38,Default,,0,0,0,,这是主板，安置在机箱底部\N有 RAM、CPU 以及其它部件
Dialogue: 0,0:04:32.38,0:04:34.14,Default,,0,0,0,,电源下面还有些别的东西
Dialogue: 0,0:04:34.14,0:04:38.50,Default,,0,0,0,,电源架在主板上方
Dialogue: 0,0:04:38.50,0:04:41.98,Default,,0,0,0,,接下来再仔细看看各部件
Dialogue: 0,0:04:41.98,0:04:49.42,Default,,0,0,0,,首先是 CPU，这是一块 MicroSPARC II\N能看到标注的是 110Mhz
Dialogue: 0,0:04:49.42,0:04:52.42,Default,,0,0,0,,CPU 是直接焊死在主板上的
Dialogue: 0,0:04:52.42,0:04:57.14,Default,,0,0,0,,工作站用的是差不多的 CPU\N但是是装在插座上的，可以升级
Dialogue: 0,0:04:57.14,0:05:01.30,Default,,0,0,0,,这里他们直接把它焊死了\N因为也没打算让你升级
Dialogue: 0,0:05:01.30,0:05:10.02,Default,,0,0,0,,CPU 没有主动散热\N只有散热片，貌似就是三块金属片叠起来而已
Dialogue: 0,0:05:10.02,0:05:14.38,Default,,0,0,0,,它依靠机箱风扇带来的气流来散热
Dialogue: 0,0:05:14.38,0:05:18.74,Default,,0,0,0,,然后是内存\N四个内存槽，每根槽最大 16MB
Dialogue: 0,0:05:18.74,0:05:22.86,Default,,0,0,0,,也就是说最大 64MB 内存
Dialogue: 0,0:05:22.86,0:05:27.38,Default,,0,0,0,,这个型号带两根 16MB 内存，组成 32MB 容量
Dialogue: 0,0:05:27.38,0:05:31.50,Default,,0,0,0,,我们把它拔出来\N可以看到，都是标准的 72-pin 内存
Dialogue: 0,0:05:31.50,0:05:36.94,Default,,0,0,0,,就是当时普通 PC 用的内存\N这也是为了降低成本
Dialogue: 0,0:05:36.94,0:05:43.30,Default,,0,0,0,,你不用去买 Sun 专用的内存\N只需要使用市面常见的标准内存条
Dialogue: 0,0:05:43.30,0:05:48.14,Default,,0,0,0,,你可能会想这瘦客户机没必要升级内存
Dialogue: 0,0:05:48.14,0:05:54.38,Default,,0,0,0,,但虽然它的确要通过服务器启动\N所有的 Java 程序都是在本地运行的
Dialogue: 0,0:05:54.38,0:05:58.61,Default,,0,0,0,,如果你要在上面运行\N复杂程序，内存真的可能会不足
Dialogue: 0,0:05:58.61,0:06:00.22,Default,,0,0,0,,所以升级内存还是有意义的
Dialogue: 0,0:06:00.22,0:06:03.86,Default,,0,0,0,,把内存插回去\N我们就有 32MB 的内存了
Dialogue: 0,0:06:03.86,0:06:10.34,Default,,0,0,0,,然后这是电源灯\N通过这根线连接到主板上
Dialogue: 0,0:06:10.34,0:06:14.94,Default,,0,0,0,,LED 是在这里，然后用\N一小段导光柱把光引到机箱外
Dialogue: 0,0:06:14.94,0:06:19.22,Default,,0,0,0,,然后这边有个小喇叭，这机器支持声音
Dialogue: 0,0:06:19.22,0:06:21.26,Default,,0,0,0,,然后它连接到电源旁边的接口上
Dialogue: 0,0:06:21.26,0:06:27.02,Default,,0,0,0,,然后是主板的供电接口\N就是个大四针接口
Dialogue: 0,0:06:27.02,0:06:31.88,Default,,0,0,0,,但旁边还有个小两针接口，不知道是干嘛的\N因为线都挺细，不像是供电
Dialogue: 0,0:06:31.88,0:06:37.34,Default,,0,0,0,,我想估计是传输电源管理数据的信号线
Dialogue: 0,0:06:37.34,0:06:40.12,Default,,0,0,0,,这两根线都接到电源上
Dialogue: 0,0:06:40.12,0:06:46.06,Default,,0,0,0,,这边有一个标准的 Crystal 音频芯片\N这在当年 Sun 的机器上挺常见的
Dialogue: 0,0:06:46.06,0:06:53.22,Default,,0,0,0,,看过来，这里有个常见的 Sun NVRAM 芯片\N里面内置有电池，保存机器的配置数据
Dialogue: 0,0:06:53.22,0:06:57.58,Default,,0,0,0,,一般这年纪的机器，电池应该都没电了
Dialogue: 0,0:06:57.58,0:07:07.74,Default,,0,0,0,,也就是说设置数据全部丢失\N我要通过串口终端手动配置才能让它启动
Dialogue: 0,0:07:07.74,0:07:09.66,Default,,0,0,0,,待会儿大家就能看到了
Dialogue: 0,0:07:09.66,0:07:17.26,Default,,0,0,0,,理论上你可以把电池换掉\N但要设法磨掉芯片的封装，然后接新电池
Dialogue: 0,0:07:17.26,0:07:20.86,Default,,0,0,0,,方法比较复杂，还可能把芯片搞挂
Dialogue: 0,0:07:20.86,0:07:25.10,Default,,0,0,0,,所以现在我们就先不动它了\N手动配置就手动配置吧
Dialogue: 0,0:07:25.10,0:07:34.22,Default,,0,0,0,,然后这里还有几个跳线\N像是各种调试模式、串口配置等
Dialogue: 0,0:07:34.22,0:07:36.74,Default,,0,0,0,,跳线挺多，不过说明也很详细
Dialogue: 0,0:07:38.02,0:07:46.05,Default,,0,0,0,,主板剩下的部分被盖在电源下面\N所以接下来我们就把电源拆掉看看
Dialogue: 0,0:07:46.05,0:07:50.20,Default,,0,0,0,,现在我们把机器拆开了，这其实并不难
Dialogue: 0,0:07:50.20,0:07:57.82,Default,,0,0,0,,只需要卸下电源上的一颗螺丝\N然后取下 VGA 接口和串口上的螺丝
Dialogue: 0,0:07:57.82,0:08:00.03,Default,,0,0,0,,然后把喇叭拆了，因为它有点挡道
Dialogue: 0,0:08:00.03,0:08:04.38,Default,,0,0,0,,然后主板连着电源就可以整个拿下来
Dialogue: 0,0:08:04.38,0:08:09.30,Default,,0,0,0,,然后我们就把电源拆下来\N看看它下面有什么
Dialogue: 0,0:08:10.86,0:08:14.58,Default,,0,0,0,,这就是主板的底部\N能看到 CPU 和内存的焊点
Dialogue: 0,0:08:14.58,0:08:23.58,Default,,0,0,0,,电源由下面的两颗螺丝固定在主板上\N我们把它们取下来就好了
Dialogue: 0,0:08:25.46,0:08:26.34,Default,,0,0,0,,这个下来了
Dialogue: 0,0:08:26.34,0:08:28.42,Default,,0,0,0,,这里还有一个
Dialogue: 0,0:08:30.13,0:08:33.14,Default,,0,0,0,,总体来说这机器还是挺好拆的
Dialogue: 0,0:08:38.08,0:08:45.11,Default,,0,0,0,,然后主板就可以拿下来了
Dialogue: 0,0:08:45.11,0:08:51.93,Default,,0,0,0,,然后我们来看看电源下藏了什么好东西
Dialogue: 0,0:08:53.20,0:08:56.60,Default,,0,0,0,,然后我们就能看到之前盖在电源下的组件了
Dialogue: 0,0:08:56.60,0:09:01.10,Default,,0,0,0,,这里有个 BT RAMDAC，就是显示芯片
Dialogue: 0,0:09:01.10,0:09:03.18,Default,,0,0,0,,它连接着这个 VGA 接口
Dialogue: 0,0:09:03.94,0:09:16.10,Default,,0,0,0,,然后这块 LevelOne 芯片，型号 LXT901PC\N是 10Mbit 以太网控制器，控制这个网口
Dialogue: 0,0:09:16.10,0:09:19.98,Default,,0,0,0,,这块小芯片应该接的是这个串口
Dialogue: 0,0:09:19.98,0:09:25.38,Default,,0,0,0,,然后这音频输出端口\N连接到这边的 Cystal 音频芯片
Dialogue: 0,0:09:27.14,0:09:31.66,Default,,0,0,0,,左手边看到这块 National Semiconductor\N（美国国家半导体公司）的多功能 I/O 控制芯片
Dialogue: 0,0:09:31.66,0:09:45.94,Default,,0,0,0,,型号 PC87303，它有很多功能\N如软驱控制器、实时时钟、双 UART、并口以及 IDE
Dialogue: 0,0:09:45.94,0:09:50.18,Default,,0,0,0,,但我想它应该只用于控制这两个 PS/2 接口
Dialogue: 0,0:09:50.18,0:09:55.42,Default,,0,0,0,,也许它也控制这边这个串口\N但离得确实有点远
Dialogue: 0,0:09:55.42,0:10:01.82,Default,,0,0,0,,那这芯片控制这两个 PS/2 接口\N或许包括那个串口，我不是很确定
Dialogue: 0,0:10:03.22,0:10:08.34,Default,,0,0,0,,这边有点腐蚀的痕迹\N但我不认为是电池漏液导致的
Dialogue: 0,0:10:08.34,0:10:15.10,Default,,0,0,0,,毕竟电池附近没有腐蚀\N而且电池封装在芯片内部，也漏不出来
Dialogue: 0,0:10:15.10,0:10:16.78,Default,,0,0,0,,我还没见过这种芯片有电池漏液的
Dialogue: 0,0:10:17.38,0:10:24.62,Default,,0,0,0,,大部分的腐蚀都发生在接口处\N如 VGA 和 PS/2 接口，以及接口附近的地方
Dialogue: 0,0:10:24.62,0:10:36.46,Default,,0,0,0,,所以我想应该是机器放在一个比较恶劣的环境\N抵在一堵潮湿墙壁旁放置导致的
Dialogue: 0,0:10:36.46,0:10:40.22,Default,,0,0,0,,但愿不会有什么大问题\N机器现在工作也挺正常的
Dialogue: 0,0:10:40.22,0:10:44.62,Default,,0,0,0,,我也许会试试用酒精清洁一下\N但估计没啥意义
Dialogue: 0,0:10:44.62,0:10:48.46,Default,,0,0,0,,毕竟不是电源漏液导致的\N应该也不会继续恶化
Dialogue: 0,0:10:50.30,0:10:55.70,Default,,0,0,0,,这是 JavaStation 拆散后的全家福\N接下来我们把它装回去看看运行情况
Dialogue: 0,0:10:57.14,0:10:59.90,Default,,0,0,0,,介绍一下我们的运行环境
Dialogue: 0,0:10:59.90,0:11:03.30,Default,,0,0,0,,这里插了个标准的 VGA 显示器
Dialogue: 0,0:11:03.30,0:11:12.22,Default,,0,0,0,,然后是 PS/2 键盘，这是 IBM Model M2\N一样是曲蹲弹簧式机械键盘，不过更小更轻
Dialogue: 0,0:11:12.22,0:11:14.82,Default,,0,0,0,,然后是个 PS/2 滚球鼠标
Dialogue: 0,0:11:14.82,0:11:17.34,Default,,0,0,0,,它们都接到了 JavaStation 上面
Dialogue: 0,0:11:17.34,0:11:23.82,Default,,0,0,0,,然后是以太网连接，它连接到我的一个网口上\N被分配到一个独立的 VLAN 里面
Dialogue: 0,0:11:23.82,0:11:31.70,Default,,0,0,0,,也就是说是一个独立的网络\N只有 JavaStation 和我虚拟机上的服务器
Dialogue: 0,0:11:31.70,0:11:37.06,Default,,0,0,0,,这个网络跟我其余的网络隔离\N里面只有 JavaStation 和我的服务器
Dialogue: 0,0:11:37.06,0:11:40.62,Default,,0,0,0,,这是因为 JavaStation 启动时\N会使用很多早已过时的网络协议通信
Dialogue: 0,0:11:40.62,0:11:44.62,Default,,0,0,0,,把它放在一个现有的网络里面\N可能会导致很多奇奇怪怪的问题
Dialogue: 0,0:11:44.62,0:11:50.22,Default,,0,0,0,,服务器提供 JavaStation 启动所需要\N的各项服务，接下来会提到
Dialogue: 0,0:11:52.02,0:11:54.62,Default,,0,0,0,,那接下来就来看看我是怎么做的
Dialogue: 0,0:11:55.13,0:12:04.06,Default,,0,0,0,,前面提到了，因为电池没电\NNVRAM 内的设置数据全部丢失，所以无法启动
Dialogue: 0,0:12:04.06,0:12:09.02,Default,,0,0,0,,网口的 MAC 地址会变成全零\N结果连接的交换机会丢弃机器发过来的数据分组
Dialogue: 0,0:12:09.02,0:12:10.62,Default,,0,0,0,,网络无法连通，机器也就无法启动
Dialogue: 0,0:12:11.90,0:12:16.26,Default,,0,0,0,,所以我们首先要做的是\N通过串口终端重新输入设置数据
Dialogue: 0,0:12:16.26,0:12:22.98,Default,,0,0,0,,所以拿出这台老笔记本，用一根\NNull Modem 线连接到 JavaStation 的串口
Dialogue: 0,0:12:22.98,0:12:29.10,Default,,0,0,0,,启动 JavaStation，并通过串口连接\N然后就可以使用命令配置它
Dialogue: 0,0:12:29.10,0:12:32.86,Default,,0,0,0,,然后重启 JavaStation\N它就会通过网络上的服务器正常启动
Dialogue: 0,0:12:32.90,0:12:39.86,Default,,0,0,0,,现在我们开机\N就能通过串口终端看到一系列信息
Dialogue: 0,0:12:47.05,0:12:54.26,Default,,0,0,0,,现在我们可以看到\N“配置数据校验失败” 等一系列的提示
Dialogue: 0,0:12:54.26,0:12:55.93,Default,,0,0,0,,然后提示启动失败，无法打开启动设备
Dialogue: 0,0:12:57.46,0:13:04.74,Default,,0,0,0,,右边记事本我们可以看到写入配置的一系列指令
Dialogue: 0,0:13:04.74,0:13:11.34,Default,,0,0,0,,还好我们可以直接复制粘贴\N不过只能一小段一小段来，否则会失败
Dialogue: 0,0:13:12.30,0:13:18.78,Default,,0,0,0,,这会将 MAC 地址设置为\N一个合理值，让机器可以正常联网
Dialogue: 0,0:13:25.22,0:13:25.98,Default,,0,0,0,,应该就是这样...
Dialogue: 0,0:13:27.46,0:13:37.74,Default,,0,0,0,,OK，现在我们已经设置好了 MAC 地址\N现在敲 “reset” 重启，然后机器就会从网络启动了
Dialogue: 0,0:13:37.74,0:13:42.90,Default,,0,0,0,,在这之前，先介绍一下\N这机器是怎么通过网络启动系统的
Dialogue: 0,0:13:42.90,0:13:48.02,Default,,0,0,0,,可以看到，它使用了不少非常古董的网络协议
Dialogue: 0,0:13:48.70,0:13:53.70,Default,,0,0,0,,首先它发送一个 RARP 请求\N试图获取一个 IP 地址
Dialogue: 0,0:13:53.70,0:14:02.54,Default,,0,0,0,,它向整个网络广播请求，里面包含其 MAC 地址\N然后等待其中有机器回应并给它 IP 地址
Dialogue: 0,0:14:02.54,0:14:08.02,Default,,0,0,0,,得到 IP 地址之后\N它再连接到给它 IP 地址的机器
Dialogue: 0,0:14:08.02,0:14:12.98,Default,,0,0,0,,并用 TFTP 协议传输\NJavaOS 的第一阶段系统文件
Dialogue: 0,0:14:12.98,0:14:16.14,Default,,0,0,0,,文件传输过去之后，系统开始启动
Dialogue: 0,0:14:16.14,0:14:21.66,Default,,0,0,0,,接下来是用 NFS 协议传输\N剩下的系统文件，这个文件包要大得多
Dialogue: 0,0:14:21.66,0:14:23.50,Default,,0,0,0,,然后继续启动过程
Dialogue: 0,0:14:23.50,0:14:28.66,Default,,0,0,0,,接下来它发起 DHCP 请求\N得到另一个 IP 地址
Dialogue: 0,0:14:28.66,0:14:31.82,Default,,0,0,0,,这是启动之后机器的 IP 地址
Dialogue: 0,0:14:31.82,0:14:36.90,Default,,0,0,0,,它还通过 DHCP 获取其它配置\N比如时间服务器地址、NIS 服务器地址
Dialogue: 0,0:14:36.90,0:14:46.10,Default,,0,0,0,,以及登录配置、是否允许来宾登录、用户主目录配置等
Dialogue: 0,0:14:46.10,0:14:56.14,Default,,0,0,0,,你还可以设置一个特殊的 DHCP 选项\N用来提供一个配置文件地址，然后机器通过 HTTP 下载它
Dialogue: 0,0:14:56.14,0:15:00.86,Default,,0,0,0,,再然后机器会发起时间请求，获取时间和日期
Dialogue: 0,0:15:00.86,0:15:07.98,Default,,0,0,0,,最后当你登录的时候，机器\N会使用 NIS 协议发送你的账号密码以登录
Dialogue: 0,0:15:07.98,0:15:14.18,Default,,0,0,0,,登录完成之后，所有的操作\N包括加载应用程序，都是基于 HTTP 协议完成
Dialogue: 0,0:15:14.18,0:15:16.22,Default,,0,0,0,,那好，我们现在准备开机
Dialogue: 0,0:15:16.22,0:15:22.06,Default,,0,0,0,,这里会展示一个 Wireshark 的实时分析结果\N让大家看到整个网络启动过程
Dialogue: 0,0:15:22.06,0:15:24.50,Default,,0,0,0,,我也会在过程中作相应介绍
Dialogue: 0,0:15:24.50,0:15:30.94,Default,,0,0,0,,现在我在旁边的笔记本上执行重启指令
Dialogue: 0,0:15:30.94,0:15:36.78,Default,,0,0,0,,如果机器工作正常的话\N效果跟冷启动应该是一致的
Dialogue: 0,0:15:36.78,0:15:40.62,Default,,0,0,0,,也就是说这相当于机器冷启动的过程
Dialogue: 0,0:15:40.62,0:15:43.42,Default,,0,0,0,,那我们现在执行重启
Dialogue: 0,0:15:49.22,0:15:51.10,Default,,0,0,0,,现在机器正在重启
Dialogue: 0,0:15:51.14,0:15:54.58,Default,,0,0,0,,等显示器亮起来机器就开始启动了
Dialogue: 0,0:15:57.10,0:16:02.10,Default,,0,0,0,,{\pos(970,360)\c&00FFFF&\3c&H005555&}注：接下来字幕会出现在此处
Dialogue: 0,0:15:59.34,0:16:02.96,Default,,0,0,0,,显示器亮起来了\N机器准备加载操作系统
Dialogue: 0,0:16:02.96,0:16:05.58,Default,,0,0,0,,{\pos(970,360)}不知道为什么报错，但没有影响
Dialogue: 0,0:16:05.58,0:16:07.34,Default,,0,0,0,,{\pos(970,360)}可以看到 RARP 请求发出去了
Dialogue: 0,0:16:07.34,0:16:09.54,Default,,0,0,0,,{\pos(970,360)}然后通过 TFTP 下载了文件
Dialogue: 0,0:16:09.54,0:16:13.42,Default,,0,0,0,,{\pos(970,360)}现在是通过 NFS\N下载剩余的操作系统文件
Dialogue: 0,0:16:13.42,0:16:18.58,Default,,0,0,0,,{\pos(970,360)}我们要等一会儿\N因为网速只有 10Mbit
Dialogue: 0,0:16:18.58,0:16:20.10,Default,,0,0,0,,{\pos(970,360)}不过确实在工作
Dialogue: 0,0:16:31.98,0:16:35.22,Default,,0,0,0,,{\pos(970,360)}现在文件传完了
Dialogue: 0,0:16:39.34,0:16:42.70,Default,,0,0,0,,{\pos(970,360)}机器发起了 DHCP 请求\N获取了各种配置
Dialogue: 0,0:16:42.70,0:16:46.42,Default,,0,0,0,,{\pos(970,360)}系统启动完成\N我们来到登录界面
Dialogue: 0,0:16:47.30,0:16:49.50,Default,,0,0,0,,{\pos(970,360)}那我们就来好好看看
Dialogue: 0,0:16:45.30,0:16:50.90,Default,,0,0,0,,{\pos(970,400)\c&00FFFF&\3c&H005555&}注：字幕即将回到初始位置
Dialogue: 0,0:16:50.90,0:16:55.02,Default,,0,0,0,,这是 JavaOS 的\N第一印象 —— 登录界面
Dialogue: 0,0:16:55.02,0:17:00.54,Default,,0,0,0,,后面是星空动画背景
Dialogue: 0,0:17:00.54,0:17:05.14,Default,,0,0,0,,然后窗口写着 “欢迎使用 JavaOS”\N旁边是个老掉牙的 Java Logo
Dialogue: 0,0:17:05.14,0:17:08.54,Default,,0,0,0,,“输入用户名与密码以登录”\N然后下面是登录按钮
Dialogue: 0,0:17:08.54,0:17:17.78,Default,,0,0,0,,你也可以通过 DHCP 配置自动登录\N或者允许来宾登录
Dialogue: 0,0:17:17.78,0:17:21.66,Default,,0,0,0,,不过这里我们就用正常用户登录了
Dialogue: 0,0:17:24.50,0:17:28.90,Default,,0,0,0,,{\pos(640,490)}然后在 Wireshark 中我们可以看到\N机器向服务器发起了 NIS 请求，检查用户权限
Dialogue: 0,0:17:28.90,0:17:38.92,Default,,0,0,0,,{\pos(640,490)}然后我们就可以登录了
Dialogue: 0,0:17:38.92,0:17:42.46,Default,,0,0,0,,好的，认证成功\N我们进入了 JavaOS
Dialogue: 0,0:17:43.66,0:17:47.18,Default,,0,0,0,,登录之后首先看到的是\N这 “欢迎来到 HotJava” 页
Dialogue: 0,0:17:47.18,0:17:50.86,Default,,0,0,0,,你也可以通过 DHCP 配置\N指定登录后出现的页面
Dialogue: 0,0:17:50.86,0:17:56.66,Default,,0,0,0,,比如说打开特定的应用\N或者一个应用列表
Dialogue: 0,0:17:56.66,0:17:58.70,Default,,0,0,0,,不过这里只出现了个欢迎页
Dialogue: 0,0:17:58.70,0:18:01.34,Default,,0,0,0,,然后它启动了 HotJava Web 浏览器
Dialogue: 0,0:18:01.34,0:18:04.26,Default,,0,0,0,,那我们就来好好看看这玩意
Dialogue: 0,0:18:04.26,0:18:08.22,Default,,0,0,0,,现在我们在 HotJava 浏览器里面\N我们来看看它能干啥
Dialogue: 0,0:18:08.22,0:18:12.18,Default,,0,0,0,,首先是个欢迎页，有几个操作说明
Dialogue: 0,0:18:12.18,0:18:17.16,Default,,0,0,0,,“按住 Shift 点击链接以打开新窗口”\N也就是说它不支持多标签
Dialogue: 0,0:18:17.74,0:18:22.70,Default,,0,0,0,,“点击页面标题以输入地址”\N就是这里的标题，点击会变成地址栏
Dialogue: 0,0:18:22.70,0:18:26.58,Default,,0,0,0,,“点击这里开始”\N那我们就来看看它的入门指南
Dialogue: 0,0:18:27.10,0:18:33.02,Default,,0,0,0,,这就打开了\N看来就是一些网页浏览的基础知识
Dialogue: 0,0:18:33.02,0:18:36.86,Default,,0,0,0,,“在 HotJava 中打开 URL”\N“用 HotJava 浏览 Web”，诸如此类
Dialogue: 0,0:18:36.86,0:18:38.22,Default,,0,0,0,,那就随便点一个
Dialogue: 0,0:18:38.22,0:18:42.81,Default,,0,0,0,,这一页有个章节系统
Dialogue: 0,0:18:42.81,0:18:47.78,Default,,0,0,0,,所以这就是个很简单的入门指南
Dialogue: 0,0:18:47.78,0:18:56.14,Default,,0,0,0,,我还没把它连上外网\N它现在在一个内网里面，我还没设置路由
Dialogue: 0,0:18:56.14,0:18:58.30,Default,,0,0,0,,所以我们暂时没法用它上网
Dialogue: 0,0:18:58.30,0:19:02.74,Default,,0,0,0,,不过估计也没啥卵用\N只能看到一堆排版爆炸的网页
Dialogue: 0,0:19:02.74,0:19:04.66,Default,,0,0,0,,甚至有些网站根本打不开
Dialogue: 0,0:19:04.66,0:19:09.38,Default,,0,0,0,,我们看点更有趣的\NJavaStation 上独有的东西
Dialogue: 0,0:19:09.38,0:19:18.02,Default,,0,0,0,,打开 View（视图）-- Monitor（监视）\N我们可以看到一系列监控系统运作的页面
Dialogue: 0,0:19:18.02,0:19:28.22,Default,,0,0,0,,比如 “Progress”（进度）\N可以看到下载和渲染页面的进度
Dialogue: 0,0:19:31.10,0:19:38.42,Default,,0,0,0,,另一页“Print Jobs”（打印任务）\N你可以接上打印机，通常是网络打印机
Dialogue: 0,0:19:38.42,0:19:40.34,Default,,0,0,0,,然后这里会列出所有打印任务
Dialogue: 0,0:19:40.34,0:19:42.98,Default,,0,0,0,,当然这里我没有接打印机\N不过这就是干这个的
Dialogue: 0,0:19:42.98,0:19:46.66,Default,,0,0,0,,可以看到下面版本号 v1.7 JavaOS
Dialogue: 0,0:19:46.66,0:19:55.50,Default,,0,0,0,,比较有意思的是，尽管页面是 HTML\N所有的控件都是 Java Applet
Dialogue: 0,0:19:55.50,0:19:59.74,Default,,0,0,0,,比如这些按钮都是 Java Applet 实现的
Dialogue: 0,0:19:59.74,0:20:04.42,Default,,0,0,0,,与现在的系统相比，这的确挺奇怪的
Dialogue: 0,0:20:04.42,0:20:10.02,Default,,0,0,0,,因为所有东西都是自动加载的\N你一打开网页，Applet 就跑起来了
Dialogue: 0,0:20:10.02,0:20:18.26,Default,,0,0,0,,而现在的浏览器你要先关掉一大堆的安全提示
Dialogue: 0,0:20:18.26,0:20:25.46,Default,,0,0,0,,我几天前配置一台 HP 交换机的时候\N每个页面都要弹十几个 Java 安全提示
Dialogue: 0,0:20:25.46,0:20:28.58,Default,,0,0,0,,而在这里，你打开一个页面\NApplets 自己就跑起来了
Dialogue: 0,0:20:28.58,0:20:32.90,Default,,0,0,0,,或许这主要是当年 Java\N还不是一个大的安全隐患
Dialogue: 0,0:20:32.90,0:20:37.18,Default,,0,0,0,,不过这样的体验确实要好很多
Dialogue: 0,0:20:37.18,0:20:39.38,Default,,0,0,0,,那这就是个打印任务监视器
Dialogue: 0,0:20:39.38,0:20:41.70,Default,,0,0,0,,然后下一页是内存占用
Dialogue: 0,0:20:41.70,0:20:47.14,Default,,0,0,0,,这也挺有意思的，它用一个 Applet\N来显示内存的占用情况
Dialogue: 0,0:20:47.14,0:20:51.46,Default,,0,0,0,,比如绿色是对象，黑色是可用空间
Dialogue: 0,0:20:51.46,0:21:00.02,Default,,0,0,0,,然后还有一些保留内存\N红色保留跟黄色保留，搞不懂是什么鬼
Dialogue: 0,0:21:00.02,0:21:02.82,Default,,0,0,0,,然后还有 mallocs
Dialogue: 0,0:21:02.82,0:21:04.50,Default,,0,0,0,,然后可用内存都在这里
Dialogue: 0,0:21:04.50,0:21:09.58,Default,,0,0,0,,这里也有一些读数\N共有 24M 内存，毕竟保留了一部分
Dialogue: 0,0:21:09.58,0:21:11.79,Default,,0,0,0,,然后是 17M 可用
Dialogue: 0,0:21:11.79,0:21:20.38,Default,,0,0,0,,有趣的是你还可以放大缩小\N然后上下滚动来观察内存占用
Dialogue: 0,0:21:20.38,0:21:27.70,Default,,0,0,0,,这种显示内存占用的方法还真奇特
Dialogue: 0,0:21:27.70,0:21:30.54,Default,,0,0,0,,你也能明显看出这是 Java 程序
Dialogue: 0,0:21:30.54,0:21:37.54,Default,,0,0,0,,下面有个“启动 GC”的按钮\N点一下，机器卡一阵子然后释放了些内存
Dialogue: 0,0:21:37.54,0:21:39.66,Default,,0,0,0,,所以你能明显看出这是 Java
Dialogue: 0,0:21:39.66,0:21:42.74,Default,,0,0,0,,而重点是，这几乎整个操作系统都是 Java
Dialogue: 0,0:21:42.74,0:21:46.26,Default,,0,0,0,,下面是一个非常精简的内核，跑着 JVM
Dialogue: 0,0:21:46.26,0:21:48.70,Default,,0,0,0,,然后它以上所有东西都是 Java
Dialogue: 0,0:21:48.70,0:21:52.14,Default,,0,0,0,,这浏览器、整个 GUI\N都是 Java 写的（连驱动程序都是）
Dialogue: 0,0:21:52.14,0:21:59.42,Default,,0,0,0,,最后还有一个线程监视器\N列出系统的所有线程
Dialogue: 0,0:21:59.42,0:22:14.06,Default,,0,0,0,,可以看到所有东西都是\N以 Java 画风的类名来命名
Dialogue: 0,0:22:14.06,0:22:21.54,Default,,0,0,0,,这就是系统上正在跑的所有线程\N理论上你可以杀掉一两个，但估计会把系统搞炸
Dialogue: 0,0:22:21.54,0:22:26.10,Default,,0,0,0,,然后这个 UI 也是 Java Applet
Dialogue: 0,0:22:26.10,0:22:31.34,Default,,0,0,0,,然后我们再来看下上面的一个\N生产环境下会使用的程序
Dialogue: 0,0:22:31.34,0:22:33.98,Default,,0,0,0,,那就是 Corel Office for Java
Dialogue: 0,0:22:33.98,0:22:37.06,Default,,0,0,0,,这是实际存在过的东西
Dialogue: 0,0:22:37.06,0:22:45.19,Default,,0,0,0,,因为程序都是从网络加载的\N加载程序就跟打开网页一样，输入网址即可
Dialogue: 0,0:22:45.19,0:22:50.34,Default,,0,0,0,,不过这里是 Java Applets \N而不是今天的 HTML + JavaScript 应用
Dialogue: 0,0:22:50.34,0:22:56.50,Default,,0,0,0,,我把应用搭在了\N系统启动时使用的那个服务器上
Dialogue: 0,0:23:01.34,0:23:08.70,Default,,0,0,0,,这是我临时做的一个菜单页\NCorel Office for Java 就在上面
Dialogue: 0,0:23:08.70,0:23:14.86,Default,,0,0,0,,不过我们先看一下它的介绍页
Dialogue: 0,0:23:14.86,0:23:25.54,Default,,0,0,0,,这是当年的一个宣传页\N上面介绍了它的功能
Dialogue: 0,0:23:25.54,0:23:31.34,Default,,0,0,0,,然后最下面有个\N“启动 Corel Office Java”，我们点进去看看
Dialogue: 0,0:23:33.38,0:23:40.30,Default,,0,0,0,,留意一下加载时间有多长\N这是一个比较大的程序，而且网速只有 10Mbit
Dialogue: 0,0:23:40.30,0:23:42.26,Default,,0,0,0,,真是等得让人发疯
Dialogue: 0,0:23:42.26,0:23:46.62,Default,,0,0,0,,而且这跟服务器无关\N毕竟服务器是跑在现代机器上
Dialogue: 0,0:23:46.62,0:23:49.98,Default,,0,0,0,,那就是网速的问题了
Dialogue: 0,0:23:49.98,0:23:55.70,Default,,0,0,0,,想到当年，服务器的配置要差很多\N而且又是多人同时使用
Dialogue: 0,0:23:55.70,0:23:58.06,Default,,0,0,0,,那更是慢得让人难以想象
Dialogue: 0,0:23:58.06,0:24:01.82,Default,,0,0,0,,不过现在 Corel Office for Java 算是启动完成了
Dialogue: 0,0:24:01.82,0:24:06.94,Default,,0,0,0,,不过我不会详细介绍它了，那会很无聊的
Dialogue: 0,0:24:06.94,0:24:12.62,Default,,0,0,0,,这里有 WordPerfect（字处理）\NQuattro（电子表格）\N和 Presentations（幻灯片）
Dialogue: 0,0:24:12.62,0:24:14.86,Default,,0,0,0,,那我们打开 WordPerfect
Dialogue: 0,0:24:14.86,0:24:19.22,Default,,0,0,0,,然后又是等得让人发疯\N可以看到下面闪烁的进度提示
Dialogue: 0,0:24:21.42,0:24:26.42,Default,,0,0,0,,还在加载中，通过\NWireshark 可以看到还在拉一大堆数据
Dialogue: 0,0:24:28.34,0:24:34.00,Default,,0,0,0,,但最终我们可以看到\NWordPerfect 在 JavaStation 上运行
Dialogue: 0,0:24:34.00,0:24:52.38,Default,,0,0,0,,然后这就是个字处理软件\N你可以打字，还可以改字号改颜色
Dialogue: 0,0:24:52.38,0:24:58.62,Default,,0,0,0,,不过是真的慢，几乎没法用
Dialogue: 0,0:24:58.62,0:25:00.90,Default,,0,0,0,,呵呵只有三个字体
Dialogue: 0,0:25:00.90,0:25:09.02,Default,,0,0,0,,确实很慢，这也是当时人们的主要槽点
Dialogue: 0,0:25:09.02,0:25:11.66,Default,,0,0,0,,真是慢如蜗牛
Dialogue: 0,0:25:11.66,0:25:14.74,Default,,0,0,0,,这就是 WordPerfect 了
Dialogue: 0,0:25:14.74,0:25:18.94,Default,,0,0,0,,点击这里回到桌面，加载其它程序\N那我们来试试 Quattro
Dialogue: 0,0:25:18.94,0:25:22.26,Default,,0,0,0,,然后我们来试试 Quattro\N跟刚刚一样，加载还是非常的慢
Dialogue: 0,0:25:25.62,0:25:26.78,Default,,0,0,0,,那就耐心等待一下
Dialogue: 0,0:25:29.14,0:25:35.66,Default,,0,0,0,,然后电子表格终于加载完了\N看着好像像样一点
Dialogue: 0,0:25:35.66,0:25:39.82,Default,,0,0,0,,应该还是可以用用的
Dialogue: 0,0:25:39.82,0:25:45.22,Default,,0,0,0,,我没用过 Quatrro\N让我以用 Excel 的经验猜猜看...
Dialogue: 0,0:25:50.17,0:25:55.33,Default,,0,0,0,,好像不管用
Dialogue: 0,0:25:55.87,0:25:59.30,Default,,0,0,0,,终于好了\N妈妈我会用电子表格了 yay！
Dialogue: 0,0:25:59.30,0:26:04.02,Default,,0,0,0,,这就是电子表格程序
Dialogue: 0,0:26:04.02,0:26:09.74,Default,,0,0,0,,我们再来看看幻灯片程序\N这个估计更有趣一点
Dialogue: 0,0:26:15.18,0:26:22.58,Default,,0,0,0,,依然是慢的令人发疯\N真要靠着这玩意干活估计要骂娘
Dialogue: 0,0:26:25.10,0:26:31.34,Default,,0,0,0,,这就是幻灯片程序了\N比如说你可以修改幻灯片的背景
Dialogue: 0,0:26:31.34,0:26:34.34,Default,,0,0,0,,这里一大排的“空”是什么鬼...
Dialogue: 0,0:26:34.34,0:26:42.10,Default,,0,0,0,,可以选择纯色、渐变还是空白\N我们这里选渐变...
Dialogue: 0,0:26:42.10,0:26:46.50,Default,,0,0,0,,简直残念...不过蜜汁好看哈
Dialogue: 0,0:26:46.50,0:26:51.76,Default,,0,0,0,,用 JavaStation\N你也可以做出这么惊悚的幻灯片（
Dialogue: 0,0:27:09.64,0:27:21.14,Default,,0,0,0,,这就是我们魔性的幻灯片了\N你愿意的话还可以播放它
Dialogue: 0,0:27:21.14,0:27:24.15,Default,,0,0,0,,我们点击播放...
Dialogue: 0,0:27:25.26,0:27:28.34,Default,,0,0,0,,然后演示就开始了
Dialogue: 0,0:27:28.34,0:27:35.78,Default,,0,0,0,,留意到每个 Java Applet 弹出的窗口上\N都会有个提示 “警告：Applet 窗口”
Dialogue: 0,0:27:35.78,0:27:41.95,Default,,0,0,0,,估计是系统的安全措施\N避免有应用弹出一个假的系统提示
Dialogue: 0,0:27:41.95,0:27:43.58,Default,,0,0,0,,毕竟这真的能做到
Dialogue: 0,0:27:43.58,0:27:51.14,Default,,0,0,0,,不过放幻灯片的时候\N上面一行警告也是挺醉的
Dialogue: 0,0:27:51.14,0:27:54.42,Default,,0,0,0,,不过这就是它的幻灯片程序了
Dialogue: 0,0:27:55.14,0:28:02.90,Default,,0,0,0,,最后是日程和联系人程序 InfoCentral
Dialogue: 0,0:28:02.90,0:28:06.28,Default,,0,0,0,,我已经把它打开了\N加载时间还是一如既往的长
Dialogue: 0,0:28:06.28,0:28:17.54,Default,,0,0,0,,这里有个简单的日程表，可以添加日程
Dialogue: 0,0:28:17.54,0:28:19.82,Default,,0,0,0,,然后还有日历功能...
Dialogue: 0,0:28:19.82,0:28:23.98,Default,,0,0,0,,还有自带通信录，添加联系人啥的
Dialogue: 0,0:28:23.98,0:28:31.14,Default,,0,0,0,,还有电子邮件\N支持 POP3 和 IMAP，这里就不折腾了
Dialogue: 0,0:28:31.14,0:28:33.14,Default,,0,0,0,,这就是它的电子邮件功能
Dialogue: 0,0:28:33.14,0:28:38.38,Default,,0,0,0,,这里它打开的每个窗口都会有\N“Applet 窗口” 警告
Dialogue: 0,0:28:39.94,0:28:44.94,Default,,0,0,0,,因为这都是 Java Applet 打开的窗口
Dialogue: 0,0:28:47.66,0:28:48.98,Default,,0,0,0,,那我们把窗口关掉
Dialogue: 0,0:28:48.98,0:28:53.70,Default,,0,0,0,,这就是 JavaStation\N上的 Corel Office for Java
Dialogue: 0,0:28:53.70,0:29:00.42,Default,,0,0,0,,给我的感觉就是，这就是\N现在 Chrome OS 和 Chromebook 的蹩脚原型
Dialogue: 0,0:29:00.42,0:29:02.50,Default,,0,0,0,,它们的都是差不多的概念
Dialogue: 0,0:29:02.50,0:29:14.58,Default,,0,0,0,,机器上什么都没有，只有一个浏览器\N然后所有程序从网页上加载，数据保存在服务器上
Dialogue: 0,0:29:14.58,0:29:22.39,Default,,0,0,0,,唯一不同的是，JavaStation 用的是 Java Applet\N而不是今天的 HTML5 + JavaScript 网页应用
Dialogue: 0,0:29:22.39,0:29:27.06,Default,,0,0,0,,而且这玩意实在\N慢得难以忍受，几乎不可用
Dialogue: 0,0:29:27.06,0:29:29.02,Default,,0,0,0,,而 Chromebook 还是能做不少事情的
Dialogue: 0,0:29:29.02,0:29:33.58,Default,,0,0,0,,用这玩意来干活会非常痛苦
Dialogue: 0,0:29:33.58,0:29:44.78,Default,,0,0,0,,但作为一台只有浏览器，所有程序通过浏览器运行的机器\N它跟 Chromebook 确实有很多相似之处
Dialogue: 0,0:29:44.78,0:29:53.78,Default,,0,0,0,,因为 JavaStation 完全无盘，没有本地存储\N这东西没必要关机，甚至没有安全关机的方法
Dialogue: 0,0:29:53.78,0:29:57.26,Default,,0,0,0,,你想关机的时候，直接关电源就好了
Dialogue: 0,0:29:58.46,0:29:59.22,Default,,0,0,0,,就这么简单
Dialogue: 0,0:30:00.80,0:30:04.08,Default,,0,0,0,,这就是 Sun JavaStation
Dialogue: 0,0:30:04.08,0:30:09.26,Default,,0,0,0,,这是台非常有趣的机器\N也是我从来没听说过的玩意
Dialogue: 0,0:30:09.26,0:30:11.90,Default,,0,0,0,,连网上关于它的资料都很少
Dialogue: 0,0:30:11.90,0:30:14.66,Default,,0,0,0,,实际上，让它跑起来是一个非常头疼的问题
Dialogue: 0,0:30:14.66,0:30:20.94,Default,,0,0,0,,因为查不到资料\N启动服务器的搭建毫无头绪
Dialogue: 0,0:30:20.94,0:30:28.50,Default,,0,0,0,,我最后只好用 Wireshark 分析网络封包\N查看机器启动时的动作
Dialogue: 0,0:30:28.50,0:30:33.62,Default,,0,0,0,,然后逆向出服务器应该提供什么服务\N再按此搭建出服务器
Dialogue: 0,0:30:33.62,0:30:37.94,Default,,0,0,0,,不过最终还是成功了\NJavaStation 得以正常工作
Dialogue: 0,0:30:37.94,0:30:43.98,Default,,0,0,0,,这是个非常有趣的系统\N我从来没见过这样的机器
Dialogue: 0,0:30:43.98,0:30:47.26,Default,,0,0,0,,而且它还是历史中被人遗忘的一页
Dialogue: 0,0:30:47.26,0:30:50.26,Default,,0,0,0,,那最后就这样\N谢谢大家的观看
Dialogue: 0,0:30:50.26,0:30:51.82,Default,,0,0,0,,（翻译：driver1998）
